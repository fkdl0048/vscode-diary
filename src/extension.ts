import * as vscode from 'vscode';
import * as path from 'path';
import * as fs from 'fs';
import { exec } from 'child_process';
import { promisify } from 'util';

const execAsync = promisify(exec);

export function activate(context: vscode.ExtensionContext) {
    console.log('Diary extension is now active!');

    let createDiaryCommand = vscode.commands.registerCommand('vscode-diary.createDiary', async () => {
        try {
            // ÏÑ§Ï†ïÏóêÏÑú Í∏∞Î≥∏ Í≤ΩÎ°ú Í∞ÄÏ†∏Ïò§Í∏∞
            const config = vscode.workspace.getConfiguration('diary');
            let basePath = config.get<string>('basePath');

            // Í∏∞Î≥∏ Í≤ΩÎ°úÍ∞Ä ÏÑ§Ï†ïÎêòÏßÄ ÏïäÏùÄ Í≤ΩÏö∞ ÏÇ¨Ïö©ÏûêÏóêÍ≤å Î¨ºÏñ¥Î≥¥Í∏∞
            if (!basePath) {
                const folderResult = await vscode.window.showOpenDialog({
                    canSelectFiles: false,
                    canSelectFolders: true,
                    canSelectMany: false,
                    title: 'ÏùºÍ∏∞Ïû• Ìè¥ÎçîÎ•º ÏÑ†ÌÉùÌïòÏÑ∏Ïöî'
                });

                if (!folderResult) {
                    return;
                }

                basePath = folderResult[0].fsPath;
                await config.update('basePath', basePath, vscode.ConfigurationTarget.Global);
            }

            // ÌòÑÏû¨ ÎÇ†Ïßú Ï†ïÎ≥¥ Í∞ÄÏ†∏Ïò§Í∏∞
            const now = new Date();
            const year = now.getFullYear();
            const month = String(now.getMonth() + 1).padStart(2, '0');
            const day = String(now.getDate()).padStart(2, '0');
            const weekDay = ['Ïùº', 'Ïõî', 'Ìôî', 'Ïàò', 'Î™©', 'Í∏à', 'ÌÜ†'][now.getDay()];

            // Ïó∞ÎèÑÎ≥Ñ Ìè¥Îçî ÏÉùÏÑ±
            const yearPath = path.join(basePath, String(year));
            if (!fs.existsSync(yearPath)) {
                fs.mkdirSync(yearPath);
            }

            // ÏõîÎ≥Ñ Ìè¥Îçî ÏÉùÏÑ±
            const monthPath = path.join(yearPath, month);
            if (!fs.existsSync(monthPath)) {
                fs.mkdirSync(monthPath);
            }

            // ÌååÏùº Ïù¥Î¶Ñ ÏÉùÏÑ±
            const fileName = `${year}${month}${day}.md`;
            const filePath = path.join(monthPath, fileName);

            // ÌååÏùºÏù¥ Ïù¥ÎØ∏ Ï°¥Ïû¨ÌïòÎäîÏßÄ ÌôïÏù∏
            if (fs.existsSync(filePath)) {
                const result = await vscode.window.showWarningMessage(
                    'Ïò§ÎäòÏùò ÏùºÍ∏∞Í∞Ä Ïù¥ÎØ∏ Ï°¥Ïû¨Ìï©ÎãàÎã§. ÏÉàÎ°ú ÏûëÏÑ±ÌïòÏãúÍ≤†ÏäµÎãàÍπå?',
                    'Ïòà', 'ÏïÑÎãàÏò§'
                );
                if (result !== 'Ïòà') {
                    // Í∏∞Ï°¥ ÌååÏùº Ïó¥Í∏∞
                    const doc = await vscode.workspace.openTextDocument(filePath);
                    await vscode.window.showTextDocument(doc);
                    return;
                }
            }

            // ÏùºÍ∏∞ ÌÖúÌîåÎ¶ø ÏÉùÏÑ±
            const template = `# ${year}ÎÖÑ ${month}Ïõî ${day}Ïùº (${weekDay})

## ÎÇ†Ïî®
- 

## Í∏∞Î∂Ñ
- 

## Ïò§Îäò ÏûàÏóàÎçò Ïùº
- 

## Í∞êÏÇ¨Ìïú Ïùº
- 

## ÎÇ¥Ïùº Ìï† Ïùº
- 

## ÏÉùÍ∞Å Ï†ïÎ¶¨

## Ïò§ÎäòÏùò Ìïú Ï§Ñ
`;

            // ÌååÏùº ÏÉùÏÑ± Î∞è Ï†ÄÏû•
            fs.writeFileSync(filePath, template);

            // ÏÉàÎ°ú ÏÉùÏÑ±Îêú ÌååÏùº Ïó¥Í∏∞
            const doc = await vscode.workspace.openTextDocument(filePath);
            await vscode.window.showTextDocument(doc);

            vscode.window.showInformationMessage('Ïò§ÎäòÏùò ÏùºÍ∏∞Í∞Ä ÏÉùÏÑ±ÎêòÏóàÏäµÎãàÎã§! üéâ');
        } catch (error) {
            vscode.window.showErrorMessage('ÏùºÍ∏∞ ÏÉùÏÑ± Ï§ë Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§: ' + error);
        }
    });

    // Git Ïª§Î∞ã Î∞è Ìë∏Ïãú Î™ÖÎ†πÏñ¥ Îì±Î°ù
    let gitCommitCommand = vscode.commands.registerCommand('vscode-diary.commitAndPush', async () => {
        try {
            const editor = vscode.window.activeTextEditor;
            if (!editor) {
                throw new Error('Ïó¥Î¶∞ ÏóêÎîîÌÑ∞Í∞Ä ÏóÜÏäµÎãàÎã§.');
            }

            const filePath = editor.document.fileName;
            if (!filePath.endsWith('.md')) {
                throw new Error('ÎßàÌÅ¨Îã§Ïö¥ ÌååÏùºÎßå Ïª§Î∞ãÌï† Ïàò ÏûàÏäµÎãàÎã§.');
            }

            // Ï†ÄÏû•ÎêòÏßÄ ÏïäÏùÄ Î≥ÄÍ≤ΩÏÇ¨Ìï≠ Ï†ÄÏû•
            await editor.document.save();

            // Git ÏûëÏóÖ ÎîîÎ†âÌÜ†Î¶¨ Ï∞æÍ∏∞
            const diaryDir = path.dirname(filePath);
            
            // Git ÏÉÅÌÉú ÌôïÏù∏
            const { stdout: status } = await execAsync('git status --porcelain', { cwd: diaryDir });
            if (!status) {
                vscode.window.showInformationMessage('Ïª§Î∞ãÌï† Î≥ÄÍ≤ΩÏÇ¨Ìï≠Ïù¥ ÏóÜÏäµÎãàÎã§.');
                return;
            }

            // ÌòÑÏû¨ ÎÇ†Ïßú Í∞ÄÏ†∏Ïò§Í∏∞
            const now = new Date();
            const dateStr = now.toISOString().split('T')[0];

            // Git add
            await execAsync('git add .', { cwd: diaryDir });

            // Git commit
            const commitMsg = `Diary: ${dateStr}`;
            await execAsync(`git commit -m "${commitMsg}"`, { cwd: diaryDir });

            // Git push
            await execAsync('git push', { cwd: diaryDir });

            vscode.window.showInformationMessage('ÏùºÍ∏∞Í∞Ä ÏÑ±Í≥µÏ†ÅÏúºÎ°ú GitHubÏóê ÏóÖÎ°úÎìúÎêòÏóàÏäµÎãàÎã§! üéâ');

        } catch (error) {
            if (error instanceof Error) {
                vscode.window.showErrorMessage('Git ÏûëÏóÖ Ï§ë Ïò§Î•ò Î∞úÏÉù: ' + error.message);
            }
        }
    });

    // ÌååÏùº Ï†ÄÏû• Ïãú ÏûêÎèô Ïª§Î∞ã Í∏∞Îä•
    let autoCommit = vscode.workspace.onDidSaveTextDocument(async (document) => {
        const config = vscode.workspace.getConfiguration('diary');
        const autoCommitEnabled = config.get<boolean>('autoCommit', false);
        
        if (autoCommitEnabled && document.fileName.endsWith('.md')) {
            await vscode.commands.executeCommand('vscode-diary.commitAndPush');
        }
    });

    context.subscriptions.push(createDiaryCommand, gitCommitCommand, autoCommit);
}

export function deactivate() {}